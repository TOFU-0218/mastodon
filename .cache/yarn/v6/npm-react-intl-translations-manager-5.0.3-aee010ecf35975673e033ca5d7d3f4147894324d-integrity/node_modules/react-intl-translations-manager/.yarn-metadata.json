{
  "manifest": {
    "name": "react-intl-translations-manager",
    "description": "Manage all translations based on the extracted messages of the babel-plugin-react-intl",
    "main": "./dist/index.js",
    "scripts": {
      "clean:install": "rimraf node_modules && npm cache clean && npm install",
      "test": "cross-env NODE_ENV=test jest",
      "test:watch": "npm test -- --watch",
      "coverage": "cross-env npm test -- --coverage --maxWorkers=4",
      "report:coverage": "cat ./coverage/coverage-final.json | ./node_modules/codecov.io/bin/codecov.io.js",
      "prebuild": "rimraf dist",
      "build": "babel src --out-dir dist",
      "semantic-release": "semantic-release",
      "eslint": "eslint ./src ./test",
      "format": "npm run format:js && npm run format:md",
      "format:js": "prettier --write --single-quote 'src/**/*.js' 'test/**/*.js'",
      "format:md": "prettier --write --single-quote --parser markdown '*.md'",
      "format:staged": "lint-staged"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/GertjanReynaert/react-intl-translations-manager.git"
    },
    "keywords": [
      "react",
      "intl",
      "translations",
      "manager",
      "management",
      "managing",
      "i18n"
    ],
    "author": {
      "name": "Gertjan Reynaert",
      "email": "gertjan.reynaert@gmail.com"
    },
    "contributors": [
      {
        "name": "Bart van Andel",
        "email": "bavanandel@gmail.com"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/GertjanReynaert/react-intl-translations-manager/issues"
    },
    "homepage": "https://github.com/GertjanReynaert/react-intl-translations-manager#readme",
    "dependencies": {
      "chalk": "^2.3.2",
      "glob": "^7.1.2",
      "json-stable-stringify": "^1.0.1",
      "mkdirp": "^0.5.1"
    },
    "devDependencies": {
      "babel-cli": "^6.26.0",
      "babel-core": "^6.26.0",
      "babel-eslint": "^8.2.2",
      "babel-jest": "^22.4.3",
      "babel-preset-env": "^1.6.1",
      "babel-preset-stage-3": "^6.24.1",
      "codecov.io": "^0.1.6",
      "cross-env": "^5.1.4",
      "cz-conventional-changelog": "^2.1.0",
      "eslint": "^4.19.1",
      "eslint-config-prettier": "^2.9.0",
      "jest": "^22.4.3",
      "lint-staged": "^7.0.0",
      "precommit": "^1.2.2",
      "prettier": "^1.11.1",
      "rimraf": "^2.6.2",
      "semantic-release": "9.1.1"
    },
    "jest": {
      "coverageDirectory": "coverage",
      "testEnvironment": "node"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "lint-staged": {
      "*.js": [
        "prettier --write --single-quote",
        "git add"
      ]
    },
    "pre-commit": "format:staged",
    "version": "5.0.3",
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-react-intl-translations-manager-5.0.3-aee010ecf35975673e033ca5d7d3f4147894324d-integrity/node_modules/react-intl-translations-manager/package.json",
    "readmeFilename": "README.md",
    "readme": "# React-intl-translations-manager\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/GertjanReynaert/react-intl-translations-manager.svg)](https://greenkeeper.io/)\n[![travis-ci][travis-image]][travis-url]\n[![Codecov][codecov-image]][codecov-url]\n[![Commitizen friendly][comitizen-image]][comitizen-url]\n[![semantic-release][semantic-image]][semantic-url]\n[![npm-downloads][npm-downloads-image]][npm-downloads-url]\n[![npm-version][npm-version-image]][npm-version-url]\n[![npm-license][npm-license-image]][npm-license-url]\n\n[travis-image]: https://img.shields.io/travis/GertjanReynaert/react-intl-translations-manager.svg\n[travis-url]: https://travis-ci.org/GertjanReynaert/react-intl-translations-manager\n[codecov-image]: https://img.shields.io/codecov/c/github/GertjanReynaert/react-intl-translations-manager.svg\n[codecov-url]: https://codecov.io/github/GertjanReynaert/react-intl-translations-manager\n[comitizen-image]: https://img.shields.io/badge/commitizen-friendly-brightgreen.svg\n[comitizen-url]: http://commitizen.github.io/cz-cli\n[semantic-image]: https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg\n[semantic-url]: https://github.com/semantic-release/semantic-release\n[npm-downloads-image]: https://img.shields.io/npm/dt/react-intl-translations-manager.svg\n[npm-downloads-url]: https://www.npmjs.com/package/react-intl-translations-manager\n[npm-version-image]: https://img.shields.io/npm/v/react-intl-translations-manager.svg\n[npm-version-url]: https://www.npmjs.com/package/react-intl-translations-manager\n[npm-license-image]: https://img.shields.io/npm/l/react-intl-translations-manager.svg\n[npm-license-url]: https://www.npmjs.com/package/react-intl-translations-manager\n\nReact-intl-translations-manager will help you in managing your translations.\nHereby it will give you the current status of your translation, telling you what\nduplicate keys you have, what messages aren't translated yet, what messages were\nadded/deleted since the last time you checked.\n\nYou'll still need to update the translations manually in your json files, but\nnow you know what messages you still need to update.\n\n## Installing\n\n```\nyarn add --dev react-intl-translations-manager\n```\n\nor\n\n```\nnpm i --save-dev react-intl-translations-manager\n```\n\n## Setup\n\n### Basic\n\nThis is an example of the most basic usage of this plugin, in the API documentation below you can find more options.\n\nCreate a script in your package.json\n\n```json\n{\n  \"scripts\": {\n    \"manage:translations\": \"node ./translationRunner.js\"\n  }\n}\n```\n\nCreate a file with your config you can run with the npm script\n\n```js\n// translationRunner.js\nconst manageTranslations = require('react-intl-translations-manager').default;\n\n// es2015 import\n// import manageTranslations from 'react-intl-translations-manager';\n\nmanageTranslations({\n  messagesDirectory: 'src/translations/extractedMessages',\n  translationsDirectory: 'src/translations/locales/',\n  languages: ['nl'] // any language you need\n});\n```\n\nRun the translation manager with your new npm script\n\n```\nnpm run manage:translations\n```\n\n## Usage\n\nNow you can check the status of your translations by just running the script. Then\nyou can change the missing translations in the translation files.\n\nIf you encounter messages that are identical in translation in a certain\nlanguage as in your default language (example: Dashboard (english) = Dashboard (dutch)),\nthen you can whitelist the translation-key in the language specific whitelist\nfile. This will prevent the message from showing up as untranslated when\nchecking the translations status.\n\n## API\n\n### manageTranslations\n\nThis will maintain all translation files. Based on your config you will get\noutput for duplicate ids, and per specified language you will get the deleted\ntranslations, added messages (new messages that need to be translated), and not\nyet translated messages. It will also maintain a whitelist file per language\nwhere you can specify translation keys where the translation is identical to\nthe default message. This way you can avoid untranslated message warnings for\nthese messages.\n\n#### Config\n\n* `messagesDirectory` (required),\n  * Directory where the babel plugin puts the extracted messages. This path is\n    relative to your projects root.\n  * example: `src/locales/extractedMessages`\n* `translationsDirectory` (required),\n  * Directory of the translation files the translation manager needs to maintain.\n  * example: `src/locales/lang`\n* `whitelistsDirectory` (optional, default: `translationsDirectory`)\n  * Directory of the whitelist files the translation manager needs to maintain.\n    These files contain the key of translations that have the exact same text in\n    a specific language as the defaultMessage. Specifying this key will suppress\n    `unmaintained translation` warnings.\n  * example: `Dashboard` in english is also accepted as a valid translation for\n    dutch.\n* `languages` (optional, default: `[]`)\n  * What languages the translation manager needs to maintain. Specifying no\n    languages actually doesn't make sense, but won't break the translationManager\n    either. (Please do not include the default language, react-intl will automatically include it.)\n  * example: for `['nl', 'fr']` the translation manager will maintain a\n    `nl.json`, `fr.json`, `whitelist_nl.json` and a `whitelist_fr.json` file\n* `singleMessagesFile` (optional, default: `false`)\n  * Option to output a single JSON file containing the aggregate of all extracted messages,\n    grouped by the file they were extracted from.\n  * example:\n  ```json\n  [\n    {\n      \"path\": \"src/components/foo.json\",\n      \"descriptors\": [\n        {\n          \"id\": \"bar\",\n          \"description\": \"Text for bar\",\n          \"defaultMessage\": \"Bar\"\n        }\n      ]\n    }\n  ]\n  ```\n* `detectDuplicateIds` (optional, default: `true`)\n  * If you want the translationManager to log duplicate message ids or not\n* `sortKeys` (optional, default: `true`)\n  * If you want the translationManager to sort it's output, both json and console output\n* `jsonOptions` (optional, default: { space: 2, trailingNewline: false })\n* `overridePrinters` (optional, default: {})\n  * Here you can specify custom logging methods. If not specified a default printer is used.\n  * Possible printers to configure:\n  ```js\n  const printers = {\n    printDuplicateIds: duplicateIds => {\n      console.log(`You have ${duplicateIds.length} duplicate IDs`);\n    },\n    printLanguageReport: report => {\n      console.log('Log report for a language');\n    },\n    printNoLanguageFile: lang => {\n      console.log(\n        `No existing ${lang} translation file found. A new one is created.`\n      );\n    },\n    printNoLanguageWhitelistFile: lang => {\n      console.log(`No existing ${lang} file found. A new one is created.`);\n    }\n  };\n  ```\n* `overrideCoreMethods` (optional, default: {})\n  * Here you can specify overrides for the core hooks. If not specified, the\n    default methods will be used.\n  * Possible overrides to configure:\n  ```js\n  const overrideCoreMethods = {\n    provideExtractedMessages: () => {},\n    outputSingleFile: () => {},\n    outputDuplicateKeys: () => {},\n    beforeReporting: () => {},\n    provideLangTemplate: () => {},\n    provideTranslationsFile: () => {},\n    provideWhitelistFile: () => {},\n    reportLanguage: () => {},\n    afterReporting: () => {}\n  };\n  ```\n\n#### Fully configured\n\nThis is the config with all options applied:\n\n```js\n// import manageTranslations from 'react-intl-translations-manager';\n\nmanageTranslations({\n  messagesDirectory: 'src/translations/extractedMessages',\n  translationsDirectory: 'src/translations/locales/',\n  whitelistsDirectory: 'src/translations/locales/whitelists/',\n  languages: ['nl'], // any language you need\n  singleMessagesFile: true,\n  detectDuplicateIds: false,\n  sortKeys: false,\n  jsonOptions: {\n    space: 4,\n    trailingNewline: true\n  },\n  overridePrinters: {\n    printDuplicateIds: duplicateIds => {\n      console.log(`You have ${duplicateIds.length} duplicate IDs`);\n    },\n    printLanguageReport: report => {\n      console.log('Log report for a language');\n    },\n    printNoLanguageFile: lang => {\n      console.log(\n        `No existing ${lang} translation file found. A new one is created.`\n      );\n    },\n    printNoLanguageWhitelistFile: lang => {\n      console.log(`No existing ${lang} file found. A new one is created.`);\n    }\n  },\n  overrideCoreMethods: {\n    provideExtractedMessages: () => {},\n    outputSingleFile: () => {},\n    outputDuplicateKeys: () => {},\n    beforeReporting: () => {},\n    provideLangTemplate: () => {},\n    provideTranslationsFile: () => {},\n    provideWhitelistFile: () => {},\n    reportLanguage: () => {},\n    afterReporting: () => {}\n  }\n});\n```\n\n\\*This config is only as illustration for all possible options, these arent\nrecommended configuration options.\n\n### CoreMethods\n\nThese are the core methods of the translationManager and what purpose they\nserve.\n\n#### provideExtractedMessages\n\n```js\nconst extractedMessages = provideExtractedMessages();\n```\n\nHere you should return all extracted messages. This should be an array, with an object per file. Each object should at least contain a `descriptors` key which in turn has an array of message objects. Each message object should at least contain the id and message.\nExample:\n\n```js\n// Minimal expected return value\nconst extractedMessages = [\n  {\n    descriptors: [\n      {\n        id: 'foo_ok',\n        defaultMessage: 'OK'\n      }\n    ]\n  }\n];\n```\n\n#### outputSingleFile\n\n```js\noutputSingleFile(extractedMessages);\n```\n\nThis gives you the option to output the extractedMessages. This way you can for example shrink all extracted files into a single File containing all messages.\n\n#### outputDuplicateKeys\n\n```js\noutputDuplicateKeys(duplicateIds);\n```\n\nThis gives you the option to warn for duplicate ids.\n\n#### beforeReporting\n\n```js\nbeforeReporting();\n```\n\nHere you can do the preparation of the reporting, like creating the necessary folders, or printing a start message\n\n#### provideLangTemplate\n\n```js\nconst languageResults = provideLangTemplate(lang);\n```\n\nHere you should provide the template for the language results. This is just a basic object (`{}`) which can contain pre-filled in data, potentially based on the language.\nThe following keys are restricted and will be overridden by the core: `report`, `noTranslationFile` and `noWhitelistFile`.\n\n#### provideTranslationsFile\n\n```js\nconst translationsFile = provideTranslationsFile(languageResults);\n```\n\nHere you should return the translations for the specified language. This must be an object with the message id and message in a key value format.\n\n```js\nconst translationsFile = {\n  messageId: 'message'\n};\n```\n\n#### provideWhitelistFile\n\n```js\nconst whitelistFile = provideWhitelistFile(languageResults);\n```\n\nHere you should return the whitelisted messsage ids for the specified language. This must be an array of strings.\n\n```js\nconst whitelistFile = ['messageId'];\n```\n\n#### reportLanguage\n\n```js\nreportLanguage(languageResults);\n```\n\nHere you can handle the reporting of the results for a language, like logging and creating files based on the results.\n\n#### afterReporting\n\n```js\nafterReporting();\n```\n\nHere you can do actions after all reports are made, like cleanup or printing a finished message.\n\n### readMessageFiles\n\n```js\nconst extractedMessages = readMessageFiles(messagesDirectory);\n```\n\nThis is a `babel-plugin-react-intl` specific helper method. It will read all extracted JSON file for the specified directory, filter out all files without any messages, and output an array with all messages.\n\nExample output:\n\n```js\nconst extractedMessages = [\n  {\n    path: 'src/components/Foo.json',\n    descriptors: [\n      {\n        id: 'foo_ok',\n        description: 'Ok text',\n        defaultMessage: 'OK'\n      }\n    ]\n  }\n];\n```\n\n### createSingleMessagesFile\n\n```js\ncreateSingleMessagesFile({ messages, directory });\n```\n\nThis helper method will output all messages (potentially read by `readMessageFiles`) in a single jsonFile.\n\n* messages: (required)\n* directory: (required, string) contains the path to the directory where the file should be written into.\n* fileName: (optional, default: `defaultMessages.json`) this filename should contain the `.json` extension\n* jsonSpaceIndentation: (optional, default: `2`) number of spaces used for indentation (0-10)\n\n### getDefaultMessages\n\n```js\nconst messages = getDefaultMessages(extractedMessages);\n```\n\nThis helper method will flatten all files (as returned from `readMessageFiles`) into a single object.\n\n```js\nconst messages = {\n  messages: {\n    messageId: 'message'\n  },\n  duplicateIds: [\n    // potentially double used message keys,\n  ]\n};\n```\n\n# License\n\nSee the [LICENSE](LICENSE) file for license rights and limitations (MIT).\n",
    "licenseText": "MIT License\n\nCopyright (c) 2017 Gertjan Reynaert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-intl-translations-manager/-/react-intl-translations-manager-5.0.3.tgz#aee010ecf35975673e033ca5d7d3f4147894324d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-intl-translations-manager/-/react-intl-translations-manager-5.0.3.tgz",
    "hash": "aee010ecf35975673e033ca5d7d3f4147894324d",
    "integrity": "sha512-EfBeugnOGFcdUbQyY9TqBMbuauQ8wm73ZqFr0UqCljhbXl7YDHQcVzclWFRkVmlUffzxitLQFhAZEVVeRNQSwA==",
    "registry": "npm",
    "packageName": "react-intl-translations-manager",
    "cacheIntegrity": "sha512-EfBeugnOGFcdUbQyY9TqBMbuauQ8wm73ZqFr0UqCljhbXl7YDHQcVzclWFRkVmlUffzxitLQFhAZEVVeRNQSwA== sha1-ruAQ7PNZdWc+Azyl19P0FHiUMk0="
  },
  "registry": "npm",
  "hash": "aee010ecf35975673e033ca5d7d3f4147894324d"
}