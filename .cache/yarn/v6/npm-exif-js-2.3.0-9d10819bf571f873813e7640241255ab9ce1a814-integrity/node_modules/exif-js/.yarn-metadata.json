{
  "manifest": {
    "name": "exif-js",
    "version": "2.3.0",
    "description": "JavaScript library for reading EXIF image metadata",
    "main": "exif.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/exif-js/exif-js"
    },
    "keywords": [
      "exif"
    ],
    "author": {
      "name": "Jacob Seidelin"
    },
    "maintainers": [
      {
        "name": "Roald de Vries"
      }
    ],
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/exif-js/exif-js/issues"
    },
    "homepage": "https://github.com/exif-js/exif-js",
    "ignore": [
      "**/.*",
      "node_modules",
      "bower_components",
      "test",
      "tests",
      "spec",
      "example"
    ],
    "devDependencies": {
      "bower": "^1.4.2",
      "mversion": "^1.10.0"
    },
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-exif-js-2.3.0-9d10819bf571f873813e7640241255ab9ce1a814-integrity/node_modules/exif-js/package.json",
    "readmeFilename": "README.md",
    "readme": "# Exif.js\n\nA JavaScript library for reading [EXIF meta data](https://en.wikipedia.org/wiki/Exchangeable_image_file_format) from image files.\n\nYou can use it on images in the browser, either from an image or a file input element. Both EXIF and IPTC metadata are retrieved.\nThis package can also be used in AMD or CommonJS environments.\n\n**Note**: The EXIF standard applies only to `.jpg` and `.tiff` images. EXIF logic in this package is based on the EXIF standard v2.2 ([JEITA CP-3451, included in this repo](/spec/Exif2-2.pdf)).\n\n## Install\nInstall `exif-js` through [NPM](https://www.npmjs.com/#getting-started):\n\n    npm install exif-js --save    \n\nOr [Bower](http://bower.io/):\n\n    bower install exif-js --save\n\nThen add a `script` tag in your an HTML in the [best position](http://stackoverflow.com/questions/436411/where-is-the-best-place-to-put-script-tags-in-html-markup) referencing your local file.\n\n    <script src=\"vendors/exif-js/exif-js\"></script>\n\n**Note**: This repo has no `.min.js`. Do your own [minification](https://en.wikipedia.org/wiki/Minification_(programming)) if you want that.\n\nIf you prefer another package manager you will probably manage :D. Or you can clone this GIT repository or download it's ZIP file and extract `exif.js` to your project.\n\n## Usage\nThe package adds a global `EXIF` variable (or AMD or CommonJS equivalent).\n\nStart with calling the `EXIF.getData` function. You pass it an image as a parameter:\n- either an image from a `<img src=\"image.jpg\">`\n- OR a user selected image in a `<file type=\"input\">` element on your page.\n\nAs a second parameter you specify a callback function. In the callback function you should use `this` to access the image with the aforementioned metadata you can then use as you want.\nThat image now has an extra `exifdata` property which is a Javascript object with the EXIF metadata. You can access it's properties to get data like the *image caption*, the *date a photo was taken* or it's *orientation*.\n\nYou can get all tages with `EXIF.getTag`. Or get a single tag with `EXIF.getTag`, where you specify the tag as the second parameter.\nThe tag names to use are listed in `EXIF.Tags` in `exif.js`.\n\n**Important**: Note that you have to wait for the image to be completely loaded, before calling `getData` or any other function. It will silently fail otherwise.\nYou can implement this wait, by running your exif-extracting logic on the `window.onLoad` function. Or on an image's own `onLoad` function.\nFor jQuery users please note that you can NOT (reliably) use jQuery's `ready` event for this. Because it fires before images are loaded.\nYou could use $(window).load() instead of $(document.ready() (please note that `exif-js has NO dependency on jQuery or any other external library). \n \n**JavaScript**:\n```javascript\nwindow.onload=getExif;\n\nfunction getExif() {\n    var img1 = document.getElementById(\"img1\");\n    EXIF.getData(img1, function() {\n        var make = EXIF.getTag(this, \"Make\");\n        var model = EXIF.getTag(this, \"Model\");\n        var makeAndModel = document.getElementById(\"makeAndModel\");\n        makeAndModel.innerHTML = `${make} ${model}`;\n    });\n\n    var img2 = document.getElementById(\"img2\");\n    EXIF.getData(img2, function() {\n        var allMetaData = EXIF.getAllTags(this);\n        var allMetaDataSpan = document.getElementById(\"allMetaDataSpan\");\n        allMetaDataSpan.innerHTML = JSON.stringify(allMetaData, null, \"\\t\");\n    });\n}\n```\n\n**HTML**:\n```html\n<img src=\"image1.jpg\" id=\"img1\" />\n<pre>Make and model: <span id=\"makeAndModel\"></span></div>\n<br/>\n<img src=\"image2.jpg\" id=\"img2\" />\n<pre id=\"allMetaDataSpan\"></pre>\n<br/>\n```\n\nNote there are also alternate tags, such the `EXIF.TiffTags`. See the source code for the full definition and use.\nYou can also get back a string with all the EXIF information in the image pretty printed by using `EXIF.pretty`.\nCheck the included [index.html](/exif-js/exif-js/blob/master/index.html).\n\nPlease refer to the [source code](exif.js) for more advanced usages such as getting image data from a [File/Blob](https://developer.mozilla.org/en/docs/Web/API/Blob) object (`EXIF.readFromBinaryFile`).\n\n## Contributions\nThis is an [open source project](LICENSE.md). Please contribute by forking this repo and issueing a pull request. The project has had notable contributions already, like reading ITPC data.\n\nYou can also contribute by [filing bugs or new features please issue](/exif-js/issues).\nOr improve the documentation. Please update this README when you do a pull request of proposed changes in base functionality.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2008 Jacob Seidelin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/exif-js/-/exif-js-2.3.0.tgz#9d10819bf571f873813e7640241255ab9ce1a814",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/exif-js/-/exif-js-2.3.0.tgz",
    "hash": "9d10819bf571f873813e7640241255ab9ce1a814",
    "integrity": "sha1-nRCBm/Vx+HOBPnZAJBJVq5zhqBQ=",
    "registry": "npm",
    "packageName": "exif-js",
    "cacheIntegrity": "sha512-1Og9pAzG2FZRVlaavH8bB8BTeHcjMdJhKmeQITkX+uLRCD0xPtKAdZ2clZmQdJ56p9adXtJ8+jwrGp/4505lYg== sha1-nRCBm/Vx+HOBPnZAJBJVq5zhqBQ="
  },
  "registry": "npm",
  "hash": "9d10819bf571f873813e7640241255ab9ce1a814"
}