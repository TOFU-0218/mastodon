{
  "manifest": {
    "name": "babel-plugin-emotion",
    "version": "9.2.11",
    "description": "A recommended babel preprocessing plugin for emotion, The Next Generation of CSS-in-JS.",
    "main": "dist/index.js",
    "files": [
      "src",
      "lib",
      "dist"
    ],
    "dependencies": {
      "@babel/helper-module-imports": "^7.0.0",
      "@emotion/babel-utils": "^0.6.4",
      "@emotion/hash": "^0.6.2",
      "@emotion/memoize": "^0.6.1",
      "@emotion/stylis": "^0.7.0",
      "babel-plugin-macros": "^2.0.0",
      "babel-plugin-syntax-jsx": "^6.18.0",
      "convert-source-map": "^1.5.0",
      "find-root": "^1.1.0",
      "mkdirp": "^0.5.1",
      "source-map": "^0.5.7",
      "touch": "^2.0.1"
    },
    "devDependencies": {
      "babel-check-duplicated-nodes": "^1.0.0",
      "babel-core": "^6.26.3"
    },
    "author": {
      "name": "Kye Hohenberger"
    },
    "homepage": "https://emotion.sh/",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/emotion-js/emotion/tree/master/packages/babel-plugin-emotion"
    },
    "keywords": [
      "styles",
      "emotion",
      "react",
      "css",
      "css-in-js"
    ],
    "bugs": {
      "url": "https://github.com/emotion-js/emotion/issues"
    },
    "gitHead": "206e5f642b13153a7fc85360c3eb7c302d7bda84",
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-babel-plugin-emotion-9.2.11-319c005a9ee1d15bb447f59fe504c35fd5807728-integrity/node_modules/babel-plugin-emotion/package.json",
    "readmeFilename": "README.md",
    "readme": "# babel-plugin-emotion\n\n> Babel plugin for the minification and optimization of emotion styles.\n\n`babel-plugin-emotion` is highly recommended, but not required in version 8 and\nabove of `emotion`.\n\n## Features\n\n<table>\n  <thead>\n    <tr>\n      <th>Feature/Syntax</th>\n      <th>Native</th>\n      <th>Babel Plugin Required</th>\n      <th>Notes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>css``</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td></td>\n    </tr>\n    <tr>\n      <td><code>css(...)</code></td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Generally used for object styles.</td>\n    </tr>\n    <tr>\n      <td><code>styled('div')``</code> syntax</td>\n      <td align=\"center\">✅</td>\n      <td align=\"center\"></td>\n      <td>Both string and object styles work without this plugin.</td>\n    </tr>\n    <tr>\n      <td><code>styled.div``</code> syntax</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Supporting the shortcut syntax without the Babel plugin requires a large list of valid elements to be included in the bundle.</td>\n    </tr>\n    <tr>\n      <td>components as selectors</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Allows an emotion component to be <a href=\"https://emotion.sh/docs/styled#targeting-another-emotion-component\">used as a CSS selector</a>.</td>\n    </tr>\n    <tr>\n      <td>Minification</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Any leading/trailing space between properties in your <code>css</code> and <code>styled</code> blocks is removed. This can reduce the size of your final bundle.</td>\n    </tr>\n    <tr>\n      <td>Dead Code Elimination</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Uglifyjs will use the injected <code>/*#__PURE__*/</code> flag comments to mark your <code>css</code> and <code>styled</code> blocks as candidates for dead code elimination.</td>\n    </tr>\n    <tr>\n      <td>Static Extraction (deprecated)</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated CSS that is eligible for extraction can be moved to an external css file.</td>\n    </tr>\n    <tr>\n      <td>Source Maps</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>When enabled, navigate directly to the style declaration in your javascript file.</td>\n    </tr>\n    <tr>\n      <td><code>css</code> as Prop</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Convenient helper for calling <code>css</code> and appending the generated className during compile time.</td>\n    </tr>\n    <tr>\n      <td>Contextual Class Names</td>\n      <td align=\"center\"></td>\n      <td align=\"center\">✅</td>\n      <td>Generated class names include the name of the variable or component they were defined in.</td>\n    </tr>\n  </tbody>\n</table>\n\n## Example\n\n**In**\n\n```javascript\nconst myStyles = css`\n  font-size: 20px;\n  @media (min-width: 420px) {\n    color: blue;\n    ${css`\n      width: 96px;\n      height: 96px;\n    `};\n    line-height: 26px;\n  }\n  background: green;\n  ${{ backgroundColor: 'hotpink' }};\n`\n```\n\n**Out**\n\n```javascript\nconst myStyles = /* #__PURE__ */ css(\n  'font-size:20px;@media(min-width:420px){color:blue;',\n  /* #__PURE__ */ css('width:96px;height:96px;'),\n  ';line-height:26px;}background:green;',\n  { backgroundColor: 'hotpink' },\n  ';'\n)\n```\n\n## Installation\n\n```bash\nyarn add --dev babel-plugin-emotion\n```\n\nor if you prefer npm\n\n```bash\nnpm install --save-dev babel-plugin-emotion\n```\n\n## Usage\n\n### Via `.babelrc` (Recommended)\n\n**.babelrc**\n\nWithout options:\n\n```json\n{\n  \"plugins\": [\"emotion\"]\n}\n```\n\nWith options:\n\n_Defaults Shown_\n\n```json\n{\n  \"plugins\": [\n    [\n      \"emotion\",\n      {\n        \"hoist\": false,\n        \"sourceMap\": false,\n        \"autoLabel\": false,\n        \"labelFormat\": \"[local]\",\n        \"extractStatic\": false,\n        \"outputDir\": \"\",\n        \"importedNames\": {\n          \"styled\": \"styled\",\n          \"css\": \"css\",\n          \"keyframes\": \"keyframes\",\n          \"injectGlobal\": \"injectGlobal\",\n          \"merge\": \"merge\"\n        }\n      }\n    ]\n  ]\n}\n```\n\nRecommended Setup\n\nUse [Babel's `env` property](https://babeljs.io/docs/usage/babelrc/#env-option)\n\n**.babelrc**\n\n```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [[\"emotion\", { \"hoist\": true }]]\n    },\n    \"development\": {\n      \"plugins\": [[\"emotion\", { \"sourceMap\": true, \"autoLabel\": true }]]\n    }\n  }\n}\n```\n\n### Via CLI\n\n```bash\nbabel --plugins babel-plugin-emotion script.js\n```\n\n### Via Node API\n\n```javascript\nrequire('@babel/core').transform('code', {\n  plugins: ['babel-plugin-emotion']\n})\n```\n\n## Options\n\n### `hoist`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n* Any argument supplied to `css` or `styled` is hoisted.\n\nBy hoisting the argument, or assigning the value to a variable, emotion is able to leverage the use of a [WeakMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)[cache](https://github.com/emotion-js/emotion/blob/6257f0c9cb00db9cbd08a9d6995f335730808329/packages/emotion/src/index.js#L85-L116) to increase performance. Users of object styles with `css` prop will benefit the most from enabling this option.\n\n**In**\n\n```javascript\nconst Sample = () => <div css={{ background: 'brown' }} />\n```\n\n**Out**\n\n```javascript\nvar _css = require('emotion').css\nvar _ref = { background: 'brown' }\n\nconst Sample = () => <div className={_css(_ref)} />\n```\n\n### `sourceMap`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n* Injected source maps for use in browser dev tools\n\n[**Documentation**](https://emotion.sh/docs/source-maps)\n\n### `autoLabel`\n\n`boolean`, defaults to `false`.\n\nThis option enables the following:\n\n* Automatically adds the `label` property to styles so that class names\n  generated by `css` or `styled` include the name of the variable the result is\n  assigned to.\n* Please note that non word characters in the variable will be removed\n  (Eg. `iconStyles$1` will become `iconStyles1`) because `$` is not valid\n  [CSS ClassName Selector](https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors#449000)\n\n#### css\n\n**In**\n\n```javascript\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css({ color: 'brown' }, 'label:brownStyles;')\n```\n\n`brownStyles`'s value would be `css-1q8eu9e-brownStyles`\n\n### `labelFormat`\n\n`string`, defaults to `\"[local]\"`.\n\nThis option only works when `autoLabel` is set to `true`. It allows you to\ndefine the format of the resulting `label`. The format is defined via string where\nvariable parts are enclosed in square brackets `[]`.\nFor example `labelFormat: \"my-classname--[local]\"`, where `[local]` will be replaced\nwith the name of the variable the result is assigned to.\n\nAllowed values:\n\n* `[local]` - the name of the variable the result of the `css` or `styled` expression is assigned to.\n* `[filename]` - name of the file (without extension) where `css` or `styled` expression is located.\n\nThis format only affects the label property of the expression, meaning that `css` prefix and hash will\nbe prepended automatically.\n\n#### css\n\n**In**\n\n```javascript\n// BrownView.js\n// autoLabel: true\n// labelFormat: [filename]--[local]\nconst brownStyles = css({ color: 'brown' })\n```\n\n**Out**\n\n```javascript\nconst brownStyles = /*#__PURE__*/ css(\n  { color: 'brown' },\n  'label:BrownView--brownStyles;'\n)\n```\n\n`BrownView--brownStyles`'s value would be `css-1q8eu9e-BrownView--brownStyles`\n\n#### styled\n\n**In**\n\n```javascript\nconst Profile = () => {\n  const H1 = styled.h1({\n    borderRadius: '50%',\n    transition: 'transform 400ms ease-in-out',\n    boxSizing: 'border-box',\n    display: 'flex',\n    ':hover': {\n      transform: 'scale(1.2)'\n    }\n  })\n}\n```\n\n**Out**\n\n```javascript\nconst Profile = () => {\n  const H1 = /*#__PURE__*/ styled('h1', {\n    label: 'H1'\n  })({\n    borderRadius: '50%',\n    transition: 'transform 400ms ease-in-out',\n    boxSizing: 'border-box',\n    display: 'flex',\n    ':hover': {\n      transform: 'scale(1.2)'\n    }\n  })\n}\n```\n\n`H1`'s class name attribute would be `css-13djram-H1`\n\n### `extractStatic`\n\n`boolean`, defaults to `false`.\n\n> Note:\n>\n> extractStatic is deprecated and will be removed in emotion@10. We recommend disabling extractStatic or using other libraries like [linaria](https://github.com/callstack-io/linaria) or [css-literal-loader](https://github.com/4Catalyzer/css-literal-loader)\n\nThis option enables the following:\n\n* Extract static styles into CSS files.\n\n[**Documentation**](https://emotion.sh/docs/extract-static)\n\n### `outputDir`\n\n`string`, defaults to `''`\n\nThis option only works when `extractStatic` is set to true. This option allows `babel-plugin-emotion` to set a different directory to where the extracted css files are saved to.\n\n### `importedNames`\n\n`object`, defaults to\n\n```json\n{\n  \"styled\": \"styled\",\n  \"css\": \"css\",\n  \"keyframes\": \"keyframes\",\n  \"injectGlobal\": \"injectGlobal\",\n  \"merge\": \"merge\"\n}\n```\n\nThis option enables the following:\n\n* Configurable import names\n\n[**Documentation**](https://emotion.sh/docs/configurable-imports)\n\n### `instances`\n\n`Array<string>`, defaults to\n\n```jsx\n;['emotion', 'react-emotion', 'preact-emotion']\n```\n\nThis option allows `babel-plugin-emotion` to know which imports to treat as\nemotion imports and transform as such. This option is **only** required if you\nuse a custom instance of emotion created with `create-emotion` or you're\nimporting emotion from somewhere other than the paths above. Relative paths are\nresolved relative to `process.cwd()`(the current working directory).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n### `primaryInstance`\n\n`string`, defaults to\n\n```jsx\n'emotion'\n```\n\nThis option allows `babel-plugin-emotion` to know where to import emotion from\nwhen it needs to import emotion. Currently this is only used for the css prop to\nimport `css` and `merge` but it could be used for other purposes in the future\nso it's recommend to make sure that this instance exports everything returned\nfrom `createEmotion`,\n[an up-to-date example of this can be found in the emotion package's source](https://github.com/emotion-js/emotion/blob/master/packages/emotion/src/index.js).\n\n[**Documentation**](https://emotion.sh/docs/instances)\n\n## Babel Macros\n\nInstead of using `babel-plugin-emotion`, you can use emotion with [`babel-plugin-macros`](https://github.com/kentcdodds/babel-plugin-macros). Add `babel-plugin-macros` to your babel config and import whatever you want from emotion but add `/macro` to the end. Currently every API except for the css prop is supported by the macro.\n\n```jsx\nimport styled from 'react-emotion/macro'\nimport { css, keyframes, injectGlobal, flush, hydrate } from 'emotion/macro'\n```\n\n[create-react-app issue discussing macros](https://github.com/facebookincubator/create-react-app/issues/2730).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Kye Hohenberger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/babel-plugin-emotion/-/babel-plugin-emotion-9.2.11.tgz#319c005a9ee1d15bb447f59fe504c35fd5807728",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/babel-plugin-emotion/-/babel-plugin-emotion-9.2.11.tgz",
    "hash": "319c005a9ee1d15bb447f59fe504c35fd5807728",
    "integrity": "sha512-dgCImifnOPPSeXod2znAmgc64NhaaOjGEHROR/M+lmStb3841yK1sgaDYAYMnlvWNz8GnpwIPN0VmNpbWYZ+VQ==",
    "registry": "npm",
    "packageName": "babel-plugin-emotion",
    "cacheIntegrity": "sha512-dgCImifnOPPSeXod2znAmgc64NhaaOjGEHROR/M+lmStb3841yK1sgaDYAYMnlvWNz8GnpwIPN0VmNpbWYZ+VQ== sha1-MZwAWp7h0Vu0R/Wf5QTDX9WAdyg="
  },
  "registry": "npm",
  "hash": "319c005a9ee1d15bb447f59fe504c35fd5807728"
}