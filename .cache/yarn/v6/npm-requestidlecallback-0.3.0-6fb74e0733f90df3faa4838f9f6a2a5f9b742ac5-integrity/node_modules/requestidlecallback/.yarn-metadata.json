{
  "manifest": {
    "name": "requestidlecallback",
    "version": "0.3.0",
    "description": "A polyfill for the requestIdleCallback.",
    "main": "index.js",
    "filename": "index.js",
    "author": {
      "name": "Alexander Farkas",
      "email": "info@corrupt-system.de"
    },
    "repository": {
      "type": "git",
      "url": "git@github.com:aFarkas/requestIdleCallback.git"
    },
    "scripts": {
      "test": "mocha-phantomjs test/index.html"
    },
    "license": "MIT",
    "devDependencies": {
      "chai": "^3.4.0",
      "jshint": "^2.8.0",
      "mocha": "^2.3.3",
      "mocha-phantomjs": "^4.0.1",
      "sinon": "^1.17.2"
    },
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-requestidlecallback-0.3.0-6fb74e0733f90df3faa4838f9f6a2a5f9b742ac5-integrity/node_modules/requestidlecallback/package.json",
    "readmeFilename": "README.md",
    "readme": "#`requestIdleCallback` polyfill/shim [![Build Status](https://api.travis-ci.org/aFarkas/requestIdleCallback.svg?branch=master)](https://travis-ci.org/aFarkas/requestIdleCallback)\n\nThis is a polyfill/shim for the `requestIdleCallback` and `cancelIdleCallback` API. Also fixes early API implementation. \n\nFor more information see the [Cooperative Scheduling of Background Tasks Draft](http://www.w3.org/TR/requestidlecallback/).\n\n##Installation\nInclude the \"index.js\" in your website and use `requestIdleCallback` and `cancelIdleCallback` according to the specification.\n\n##How it works\n`requestIdleCallback` can't be really polyfilled. Therefore `requestIdleCallback` basically includes a throttle like function, that uses some heuristics to detect a) long running frames and b) user input as also DOM mutations to adapt accordingly. `requestIdleCallback` also tries to get the time right after a frame commit. The `deadline.timeRemaining()` either starts with 7ms or with 22ms for the first scheduled callback.\n\nIf multiple functions are scheduled with the `requestIdleCallback` shim for the same idle time, the shim makes sure to split those functions as soon as `timeRemaining()` is exceeded.\n\n##Usage\n\nIf you have a fast or a non-splittable task:\n\n```js\nrequstIdleCallback(function(){\n\t//your task\n});\n```\n\nIn case you have a heavy and splittable task you can use efficient script yielding technique:\n\n```js\nrequestIdleCallback(function(deadline){\n\twhile(tasks.length && deadline.timeRemaining() > 0){\n\t\ttasks.shift()();\n\t}\n\t\n\tif(tasks.length){\n\t\trequestIdleCallback(runTasks);\n\t}\n});\n```\n\n**Reading vs writing layout:** `requestIdleCallback` is mainly for layout neutral or layout reading/measuring tasks. In case you want to write layout/manipulate the DOM consider using `requestAnimationFrame` instead.\n\nOf course `requestIdleCallback` can also be combined with `requestAnimationFrame`:\n\n```js\nrequstIdleCallback(function(){\n\tvar width = element.offsetWidth;\n\t\n\trequestAnimationFrame(function(){\n\t\telement.classList[width > 600 ? 'add' : 'remove']('is-large');\n\t});\n});\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/requestidlecallback/-/requestidlecallback-0.3.0.tgz#6fb74e0733f90df3faa4838f9f6a2a5f9b742ac5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/requestidlecallback/-/requestidlecallback-0.3.0.tgz",
    "hash": "6fb74e0733f90df3faa4838f9f6a2a5f9b742ac5",
    "integrity": "sha1-b7dOBzP5DfP6pIOPn2oqX5t0KsU=",
    "registry": "npm",
    "packageName": "requestidlecallback",
    "cacheIntegrity": "sha512-TWHFkT7S9p7IxLC5A1hYmAYQx2Eb9w1skrXmQ+dS1URyvR8tenMLl4lHbqEOUnpEYxNKpkVMXUgknVpBZWXXfQ== sha1-b7dOBzP5DfP6pIOPn2oqX5t0KsU="
  },
  "registry": "npm",
  "hash": "6fb74e0733f90df3faa4838f9f6a2a5f9b742ac5"
}