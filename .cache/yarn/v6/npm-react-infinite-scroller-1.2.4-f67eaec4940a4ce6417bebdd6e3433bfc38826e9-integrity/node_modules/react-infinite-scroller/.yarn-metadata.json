{
  "manifest": {
    "name": "react-infinite-scroller",
    "version": "1.2.4",
    "description": "Infinite scroll component for React in ES6",
    "main": "index.js",
    "jsnext:main": "src/InfiniteScroll.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/CassetteRocks/react-infinite-scroller.git"
    },
    "scripts": {
      "build": "mkdirp dist && babel src/InfiniteScroll.js --out-file dist/InfiniteScroll.js",
      "prepublish": "npm run build",
      "test": "nyc npm run spec",
      "spec": "_mocha -R spec ./test/test_helper.js --recursive test/*_test.js",
      "lint": "node_modules/.bin/eslint ./src ./test",
      "precommit": "lint-staged"
    },
    "lint-staged": {
      "*.{js,jsx}": [
        "node_modules/.bin/eslint ./src ./test --fix --max-warnings 0 --no-ignore",
        "git add"
      ]
    },
    "keywords": [
      "infinite",
      "scroll",
      "react"
    ],
    "author": {
      "name": "CassetteRocks"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/CassetteRocks/react-infinite-scroller/issues"
    },
    "dependencies": {
      "prop-types": "^15.5.8"
    },
    "peerDependencies": {
      "react": "^0.14.9 || ^15.3.0 || ^16.0.0"
    },
    "devDependencies": {
      "babel-cli": "^6.6.5",
      "babel-core": "^6.26.3",
      "babel-eslint": "^7.2.3",
      "babel-istanbul": "^0.12.2",
      "babel-loader": "^7.0.0",
      "babel-plugin-add-module-exports": "^0.1.2",
      "babel-plugin-istanbul": "^4.1.6",
      "babel-plugin-transform-object-rest-spread": "^6.23.0",
      "babel-preset-es2015": "^6.6.0",
      "babel-preset-react": "^6.5.0",
      "babel-preset-stage-2": "^6.13.0",
      "chai": "^3.5.0",
      "chai-enzyme": "^0.6.1",
      "enzyme": "^3.3.0",
      "enzyme-adapter-react-16": "^1.1.1",
      "eslint": "^4.10.0",
      "eslint-config-last": "^0.0.3",
      "eslint-config-prettier": "^2.6.0",
      "eslint-plugin-prettier": "^2.3.1",
      "eslint-plugin-react": "^7.4.0",
      "husky": "^0.14.3",
      "istanbul": "^0.4.5",
      "jsdom": "^10.0.0",
      "lint-staged": "^4.3.0",
      "mkdirp": "^0.5.1",
      "mocha": "^3.3.0",
      "nyc": "^10.2.0",
      "prettier": "^1.7.4",
      "react": "^16.0.0",
      "react-dom": "^16.0.0",
      "react-test-renderer": "^16.0.0",
      "sinon": "^2.1.0",
      "webpack": "^2.5.1"
    },
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-react-infinite-scroller-1.2.4-f67eaec4940a4ce6417bebdd6e3433bfc38826e9-integrity/node_modules/react-infinite-scroller/package.json",
    "readmeFilename": "README.md",
    "readme": "React Infinite Scroller\n=======================\n\n[![Travis](https://img.shields.io/travis/CassetteRocks/react-infinite-scroller.svg?style=flat-square)](https://travis-ci.org/CassetteRocks/react-infinite-scroller)\n[![npm](https://img.shields.io/npm/dt/react-infinite-scroller.svg?style=flat-square)](https://www.npmjs.com/package/react-infinite-scroller)\n[![React Version](https://img.shields.io/badge/React-%5E0.14.9%20%7C%7C%20%5E15.3.0%20%7C%7C%20%5E16.0.0-blue.svg?style=flat-square)](https://www.npmjs.com/package/react)\n[![npm](https://img.shields.io/npm/v/react-infinite-scroller.svg?style=flat-square)](https://www.npmjs.com/package/react-infinite-scroller)\n[![npm](https://img.shields.io/npm/l/react-infinite-scroller.svg?style=flat-square)](https://github.com/CassetteRocks/react-infinite-scroller/blob/master/LICENSE)\n\nInfinitely load content using a React Component. This fork maintains a simple, lightweight infinite scroll package that supports both `window` and scrollable elements.\n\n- [Demo](https://cassetterocks.github.io/react-infinite-scroller/demo/)\n- [Demo Source](https://github.com/CassetteRocks/react-infinite-scroller/blob/master/docs/src/index.js)\n\n## Installation\n\n```\nnpm install react-infinite-scroller --save\n```\n```\nyarn add react-infinite-scroller\n```\n\n## How to use\n\n```js\nimport InfiniteScroll from 'react-infinite-scroller';\n```\n\n### Window scroll events\n\n```js\n<InfiniteScroll\n    pageStart={0}\n    loadMore={loadFunc}\n    hasMore={true || false}\n    loader={<div className=\"loader\" key={0}>Loading ...</div>}\n>\n    {items} // <-- This is the content you want to load\n</InfiniteScroll>\n```\n\n### DOM scroll events\n\n```js\n<div style=\"height:700px;overflow:auto;\">\n    <InfiniteScroll\n        pageStart={0}\n        loadMore={loadFunc}\n        hasMore={true || false}\n        loader={<div className=\"loader\" key={0}>Loading ...</div>}\n        useWindow={false}\n    >\n        {items}\n    </InfiniteScroll>\n</div>\n```\n\n### Custom parent element\n\nYou can define a custom `parentNode` element to base the scroll calulations on.\n\n```js\n<div style=\"height:700px;overflow:auto;\" ref={(ref) => this.scrollParentRef = ref}>\n    <div>\n        <InfiniteScroll\n            pageStart={0}\n            loadMore={loadFunc}\n            hasMore={true || false}\n            loader={<div className=\"loader\" key={0}>Loading ...</div>}\n            useWindow={false}\n            getScrollParent={() => this.scrollParentRef}\n        >\n            {items}\n        </InfiniteScroll>\n    </div>\n</div>\n```\n\n## Props\n\n| Name             | Type          | Default    | Description|\n|:----             |:----          |:----       |:----|\n| `element`        | `Component`      | `'div'`    | Name of the element that the component should render as.|\n| `hasMore`        | `Boolean`     | `false`    | Whether there are more items to be loaded. Event listeners are removed if `false`.|\n| `initialLoad`    | `Boolean`     | `true`     | Whether the component should load the first set of items.|\n| `isReverse`      | `Boolean`     | `false`    | Whether new items should be loaded when user scrolls to the top of the scrollable area.|\n| `loadMore`       | `Function`    |            | A callback when more items are requested by the user. Receives a single parameter specifying the page to load e.g. `function handleLoadMore(page) { /* load more items here */ }` }|\n| `loader`         | `Component`   |            | A React component to render while more items are loading. The parent component must have a unique key prop. |\n| `pageStart`      | `Number`      | `0`        | The number of the first page to load, With the default of `0`, the first page is `1`.|\n| `getScrollParent`   | `Function`|           | Override method to return a different scroll listener if it's not the immediate parent of InfiniteScroll. |\n| `threshold`      | `Number`     | `250`      | The distance in pixels before the end of the items that will trigger a call to `loadMore`.|\n| `useCapture`     | `Boolean`     | `false`     | Proxy to the `useCapture` option of the added event listeners.|\n| `useWindow`      | `Boolean`     | `true`     | Add scroll listeners to the window, or else, the component's `parentNode`.|\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 CASSETTE\nCopyright (c) 2013 guillaumervls\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/react-infinite-scroller/-/react-infinite-scroller-1.2.4.tgz#f67eaec4940a4ce6417bebdd6e3433bfc38826e9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/react-infinite-scroller/-/react-infinite-scroller-1.2.4.tgz",
    "hash": "f67eaec4940a4ce6417bebdd6e3433bfc38826e9",
    "integrity": "sha512-/oOa0QhZjXPqaD6sictN2edFMsd3kkMiE19Vcz5JDgHpzEJVqYcmq+V3mkwO88087kvKGe1URNksHEOt839Ubw==",
    "registry": "npm",
    "packageName": "react-infinite-scroller",
    "cacheIntegrity": "sha512-/oOa0QhZjXPqaD6sictN2edFMsd3kkMiE19Vcz5JDgHpzEJVqYcmq+V3mkwO88087kvKGe1URNksHEOt839Ubw== sha1-9n6uxJQKTOZBe+vdbjQzv8OIJuk="
  },
  "registry": "npm",
  "hash": "f67eaec4940a4ce6417bebdd6e3433bfc38826e9"
}