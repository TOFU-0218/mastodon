{
  "manifest": {
    "name": "compression-webpack-plugin",
    "version": "3.0.0",
    "description": "Prepare compressed versions of assets to serve them with Content-Encoding",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/compression-webpack-plugin.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/compression-webpack-plugin",
    "bugs": {
      "url": "https://github.com/webpack-contrib/compression-webpack-plugin/issues"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 8.9.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --ignore \"src/**/*.test.js\" --copy-files",
      "clean": "del-cli dist",
      "commitlint": "commitlint --from=master",
      "lint:prettier": "prettier \"{**/*,*}.{js,json,md,yml,css}\" --list-different",
      "lint:js": "eslint --cache src test",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "prepare": "npm run build",
      "release": "standard-version",
      "security": "npm audit",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "cross-env NODE_ENV=test jest --watch",
      "test:coverage": "cross-env NODE_ENV=test jest --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "cross-env NODE_ENV=test npm run test:coverage",
      "defaults": "webpack-defaults"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^4.3.0"
    },
    "dependencies": {
      "cacache": "^11.2.0",
      "find-cache-dir": "^3.0.0",
      "neo-async": "^2.5.0",
      "schema-utils": "^1.0.0",
      "serialize-javascript": "^1.4.0",
      "webpack-sources": "^1.0.1"
    },
    "devDependencies": {
      "@babel/cli": "^7.4.4",
      "@babel/core": "^7.4.5",
      "@babel/preset-env": "^7.4.5",
      "@commitlint/cli": "^8.0.0",
      "@commitlint/config-conventional": "^8.0.0",
      "@gfx/zopfli": "^1.0.8",
      "@webpack-contrib/defaults": "^5.0.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^24.8.0",
      "commitlint-azure-pipelines-cli": "^1.0.2",
      "cross-env": "^5.2.0",
      "del": "^4.1.1",
      "del-cli": "^2.0.0",
      "eslint": "^5.4.0",
      "eslint-config-prettier": "^4.3.0",
      "eslint-plugin-import": "^2.14.0",
      "file-loader": "^3.0.1",
      "husky": "^2.3.0",
      "jest": "^24.8.0",
      "jest-junit": "^6.4.0",
      "lint-staged": "^8.1.7",
      "memory-fs": "^0.4.1",
      "npm-run-all": "^4.1.5",
      "prettier": "^1.14.2",
      "standard-version": "^6.0.1",
      "webpack": "^4.17.1"
    },
    "keywords": [
      "webpack"
    ],
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-compression-webpack-plugin-3.0.0-097d2e4d95c3a14cb5c8ed20899009ab5b9bbca0-integrity/node_modules/compression-webpack-plugin/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![cover][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# compression-webpack-plugin\n\nPrepare compressed versions of assets to serve them with Content-Encoding.\n\n## Requirements\n\nThis module requires a minimum of Node v6.9.0 and Webpack v4.0.0.\n\n## Getting Started\n\nTo begin, you'll need to install `compression-webpack-plugin`:\n\n```console\n$ npm install compression-webpack-plugin --save-dev\n```\n\nThen add the plugin to your `webpack` config. For example:\n\n**webpack.config.js**\n\n```js\nconst CompressionPlugin = require('compression-webpack-plugin');\n\nmodule.exports = {\n  plugins: [new CompressionPlugin()],\n};\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n### `test`\n\nType: `String|RegExp|Array<String|RegExp>`\nDefault: `undefined`\n\nTest to match files against.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  test: /\\.js(\\?.*)?$/i,\n});\n```\n\n### `include`\n\nType: `String|RegExp|Array<String|RegExp>`\nDefault: `undefined`\n\nFiles to include.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  include: /\\/includes/,\n});\n```\n\n### `exclude`\n\nType: `String|RegExp|Array<String|RegExp>`\nDefault: `undefined`\n\nFiles to exclude.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  exclude: /\\/excludes/,\n});\n```\n\n### `cache`\n\nType: `Boolean|String`\nDefault: `false`\n\nEnable file caching.\nThe default path to cache directory: `node_modules/.cache/compression-webpack-plugin`.\n\n#### `Boolean`\n\nEnable/disable file caching.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  cache: true,\n});\n```\n\n#### `String`\n\nEnable file caching and set path to cache directory.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  cache: 'path/to/cache',\n});\n```\n\n### `filename`\n\nType: `String|Function`\nDefault: `[path].gz[query]`\n\nThe target asset filename.\n\n#### `String`\n\n`[file]` is replaced with the original asset filename.\n`[path]` is replaced with the path of the original asset.\n`[query]` is replaced with the query.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  filename: '[path].gz[query]',\n});\n```\n\n#### `Function`\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  filename(info) {\n    // info.file is the original asset filename\n    // info.path is the path of the original asset\n    // info.query is the query\n    return `${info.path}.gz${info.query}`;\n  },\n});\n```\n\n### `algorithm`\n\nType: `String|Function`\nDefault: `gzip`\n\nThe compression algorithm/function.\n\n#### `String`\n\nThe algorithm is taken from [zlib](https://nodejs.org/api/zlib.html).\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  algorithm: 'gzip',\n});\n```\n\n#### `Function`\n\nAllow to specify a custom compression function.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  algorithm(input, compressionOptions, callback) {\n    return compressionFunction(input, compressionOptions, callback);\n  },\n});\n```\n\n### `compressionOptions`\n\nType: `Object`\nDefault: `{ level: 9 }`\n\nIf you use custom function for the `algorithm` option, the default value is `{}`.\n\nCompression options.\nYou can find all options here [zlib](https://nodejs.org/api/zlib.html#zlib_class_options).\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  compressionOptions: { level: 1 },\n});\n```\n\n### `threshold`\n\nType: `Number`\nDefault: `0`\n\nOnly assets bigger than this size are processed. In bytes.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  threshold: 8192,\n});\n```\n\n### `minRatio`\n\nType: `Number`\nDefault: `0.8`\n\nOnly assets that compress better than this ratio are processed (`minRatio = Compressed Size / Original Size`).\nExample: you have `image.png` file with 1024b size, compressed version of file has 768b size, so `minRatio` equal `0.75`.\nIn other words assets will be processed when the `Compressed Size / Original Size` value less `minRatio` value.\nYou can use `1` value to process all assets.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  minRatio: 0.8,\n});\n```\n\n### `deleteOriginalAssets`\n\nType: `Boolean`\nDefault: `false`\n\nWhether to delete the original assets or not.\n\n```js\n// in your webpack.config.js\nnew CompressionPlugin({\n  deleteOriginalAssets: true,\n});\n```\n\n## Examples\n\n### Using Zopfli\n\nPrepare compressed versions of assets using `zopfli` library.\n\n> ℹ️ `@gfx/zopfli` require minimum `8` version of `node`.\n\nTo begin, you'll need to install `@gfx/zopfli`:\n\n```console\n$ npm install @gfx/zopfli --save-dev\n```\n\n**webpack.config.js**\n\n```js\nconst zopfli = require('@gfx/zopfli');\n\nmodule.exports = {\n  plugins: [\n    new CompressionPlugin({\n      compressionOptions: {\n        numiterations: 15,\n      },\n      algorithm(input, compressionOptions, callback) {\n        return zopfli.gzip(input, compressionOptions, callback);\n      },\n    }),\n  ],\n};\n```\n\n### Using Brotli\n\n[Brotli](https://en.wikipedia.org/wiki/Brotli) is a compression algorithm originally developed by Google, and offers compression superior to gzip.\n\nNode 11.7.0 and later has [native support](https://nodejs.org/api/zlib.html#zlib_zlib_createbrotlicompress_options) for Brotli compression in its zlib module.\n\nWe can take advantage of this built-in support for Brotli in Node 11.7.0 and later by just passing in the appropriate `algorithm` to the CompressionPlugin:\n\n```js\n// in your webpack.config.js\nmodule.exports = {\n  plugins: [\n    new CompressionPlugin({\n      filename: '[path].br[query]',\n      algorithm: 'brotliCompress',\n      test: /\\.(js|css|html|svg)$/,\n      compressionOptions: { level: 11 },\n      threshold: 10240,\n      minRatio: 0.8,\n      deleteOriginalAssets: false,\n    }),\n  ],\n};\n```\n\n**N.B.:** The `level` option matches `BROTLI_PARAM_QUALITY` [for Brotli-based streams](https://nodejs.org/api/zlib.html#zlib_for_brotli_based_streams)\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/compression-webpack-plugin.svg\n[npm-url]: https://npmjs.com/package/compression-webpack-plugin\n[node]: https://img.shields.io/node/v/compression-webpack-plugin.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/compression-webpack-plugin.svg\n[deps-url]: https://david-dm.org/webpack-contrib/compression-webpack-plugin\n[tests]: https://dev.azure.com/webpack-contrib/compression-webpack-plugin/_apis/build/status/webpack-contrib.compression-webpack-plugin?branchName=master\n[tests-url]: https://dev.azure.com/webpack-contrib/compression-webpack-plugin/_build/latest?definitionId=2&branchName=master\n[cover]: https://codecov.io/gh/webpack-contrib/compression-webpack-plugin/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/compression-webpack-plugin\n[chat]: https://img.shields.io/badge/gitter-webpack%2Fwebpack-brightgreen.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=compression-webpack-plugin\n[size-url]: https://packagephobia.now.sh/result?p=compression-webpack-plugin\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/compression-webpack-plugin/-/compression-webpack-plugin-3.0.0.tgz#097d2e4d95c3a14cb5c8ed20899009ab5b9bbca0",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/compression-webpack-plugin/-/compression-webpack-plugin-3.0.0.tgz",
    "hash": "097d2e4d95c3a14cb5c8ed20899009ab5b9bbca0",
    "integrity": "sha512-ls+oKw4eRbvaSv/hj9NmctihhBcR26j76JxV0bLRLcWhrUBdQFgd06z/Kgg7exyQvtWWP484wZxs0gIUX3NO0Q==",
    "registry": "npm",
    "packageName": "compression-webpack-plugin",
    "cacheIntegrity": "sha512-ls+oKw4eRbvaSv/hj9NmctihhBcR26j76JxV0bLRLcWhrUBdQFgd06z/Kgg7exyQvtWWP484wZxs0gIUX3NO0Q== sha1-CX0uTZXDoUy1yO0giZAJq1ubvKA="
  },
  "registry": "npm",
  "hash": "097d2e4d95c3a14cb5c8ed20899009ab5b9bbca0"
}