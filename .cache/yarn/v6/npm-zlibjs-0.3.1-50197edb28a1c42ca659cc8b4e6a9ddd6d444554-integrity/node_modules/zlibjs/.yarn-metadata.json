{
  "manifest": {
    "author": {
      "name": "Yuta Imaya",
      "email": "imaya.devel@gmail.com"
    },
    "name": "zlibjs",
    "description": "zlib, gzip and zip implementation in JavaScript",
    "version": "0.3.1",
    "license": "MIT",
    "main": "./bin/node-zlib.js",
    "homepage": "https://github.com/imaya/zlib.js",
    "repository": {
      "type": "git",
      "url": "git://github.com/imaya/zlib.js.git"
    },
    "dependencies": {},
    "devDependencies": {
      "babel-preset-env": "^1.5.1",
      "babel-preset-power-assert": "^1.0.0",
      "babel-register": "^6.24.1",
      "grunt": "^1.0.1",
      "grunt-closure-tools": "^0.9.9",
      "grunt-contrib-concat": "^1.0.1",
      "karma": "^1.3.0",
      "karma-chrome-launcher": "^2.2.0",
      "karma-espower-preprocessor": "^1.1.0",
      "karma-firefox-launcher": "^1.0.1",
      "karma-mocha": "^1.3.0",
      "karma-mocha-reporter": "^2.2.3",
      "karma-power-assert": "^1.0.0",
      "karma-sinon": "^1.0.5",
      "mocha": "^3.1.0",
      "power-assert": "^1.4.4",
      "sinon": "^2.3.2"
    },
    "files": [
      "README.md",
      "README.en.md",
      "ChangeLog.md",
      "LICENSE",
      "bin",
      "package.json"
    ],
    "optionalDependencies": {},
    "engines": {
      "node": "*"
    },
    "scripts": {
      "test": "npm run test-mocha && npm run test-karma",
      "test-mocha": "mocha --compilers js:babel-register test/nodejs/node-test.js",
      "test-karma": "karma start --single-run"
    },
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-zlibjs-0.3.1-50197edb28a1c42ca659cc8b4e6a9ddd6d444554-integrity/node_modules/zlibjs/package.json",
    "readmeFilename": "README.en.md",
    "readme": "zlib.js\n=======\n\n[![Build Status](https://travis-ci.org/imaya/zlib.js.png?branch=master)](https://travis-ci.org/imaya/zlib.js)\n\n[Japanese version](./README.md)\n\nzlib.js is ZLIB(RFC1950), DEFLATE(RFC1951), GZIP(RFC1952) and PKZIP implementation in JavaScript.\n\n\nUsage\n------\n\nUse one in \"bin\" directory.\n\n- zlib_and_gzip.min.js: ZLIB + GZIP\n    + (Raw)\n        * rawdeflate.js: Raw Deflate\n        * rawinflate.js: Raw Inflate\n    + zlib.min.js: ZLIB Inflate + Deflate\n        * inflate.min.js: ZLIB Inflate\n        * deflate.min.js: ZLIB Deflate\n        * inflate_stream.min.js: ZLIB Inflate (stream mode)\n    + (GZIP)\n        * gzip.min.js: GZIP\n        * gunzip.min.js: GUNZIP\n    + (PKZIP)\n        * zip.min.js ZIP\n        * unzip.min.js UNZIP\n- node-zlib.js: (ZLIB + GZIP for node.js)\n\n\n### Compression\n\n#### Raw Deflate\n\n```js\n// plain = Array.<number> or Uint8Array\nvar deflate = new Zlib.RawDeflate(plain);\nvar compressed = deflate.compress();\n```\n\n#### Raw Deflate Option\n\nSee ZLIB Option.\n\n#### ZLIB\n\n```js\n// plain = Array.<number> or Uint8Array\nvar deflate = new Zlib.Deflate(plain);\nvar compressed = deflate.compress();\n```\n\n##### ZLIB Option\n\nSecond argument of Zlib.Deflate constructor\n\n```js\n{\n    compressionType: Zlib.Deflate.CompressionType, // compression type\n    lazy: number // lazy matching parameter\n}\n```\n\n<code>Zlib.Deflate.CompressionType</code> is enumerable,\nChoose one in <code>NONE</code> (Store), <code>FIXED</code> (Fixed Huffman Coding), <code>DYNAMIC</code> (Dynamic Huffman Coding).\nDefault value is <code>DYNAMIC</code>.\n\n<code>lazy</code> is Lazy Matching length.\nThis parameter is deprecated.\n\n\n#### GZIP\n\nGZIP implementation is incomplete.\nHowever, there is no problem in usual use. \n\n```js\n// plain = Array.<number> or Uint8Array\nvar gzip = new Zlib.Gzip(plain);\nvar compressed = gzip.compress();\n```\n\n\n##### GZIP Option\n\n```js\n{\n    deflateOptions: Object, // see: deflate option (ZLIB Option)\n    flags: {\n        fname: boolean, // use filename?\n        comment: boolean, // use comment?\n        fhcrc: boolean // use file checksum?\n    },\n    filename: string, // filename\n    comment: string // comment\n}\n```\n\n\n#### PKZIP\n\n```js\nvar zip = new Zlib.Zip();\n// plainData1\nzip.addFile(plainData1, {\n    filename: stringToByteArray('foo.txt')\n});\nzip.addFile(plainData2, {\n    filename: stringToByteArray('bar.txt')\n});\nzip.addFile(plainData3, {\n    filename: stringToByteArray('baz.txt')\n});\nvar compressed = zip.compress();\n\nfunction stringToByteArray(str) {\n    var array = new (window.Uint8Array !== void 0 ? Uint8Array : Array)(str.length);\n    var i;\n    var il;\n\n    for (i = 0, il = str.length; i < il; ++i) {\n        array[i] = str.charCodeAt(i) & 0xff;\n    }\n\n    return array;\n}\n```\n\n##### PKZIP Option\n\nfilename, comment, extraField are must use Uint8Array if enabled Typed Array.\n\n```js\n{\n    filename: (Array.<number>|Uint8Array), // filename\n    comment: (Array.<number>|Uint8Array), //comment\n    extraField: (Array.<number>|Uint8Array), // extra field\n    compress: boolean, // compress when called \"addFile\" method.\n    compressionMethod: Zlib.Zip.CompressionMethod, // STORE or DEFLATE\n    os: Zlib.Zip.OperatingSystem, // MSDOS or UNIX or MACINTOSH\n    deflateOption: Object // see: ZLIB Option\n}\n```\n\n### Decompression\n\n#### Raw Deflate\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar inflate = new Zlib.RawInflate(compressed);\nvar plain = inflate.decompress();\n```\n\n#### Raw Deflate Option\n\nSee ZLIB Option.\n\n#### ZLIB\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar inflate = new Zlib.Inflate(compressed);\nvar plain = inflate.decompress();\n```\n\n##### ZLIB Option\n\nSecond argument of Zlib.Inflate constructor\n\n```js\n{\n    'index': number, // start position in input buffer \n    'bufferSize': number, // initial output buffer size\n    'bufferType': Zlib.Inflate.BufferType, // buffer expantion type\n    'resize': boolean, // resize buffer(ArrayBuffer) when end of decompression (default: false)\n    'verify': boolean  // verify decompression result (default: false)\n}\n```\n\n<code>Zlib.Inflate.BufferType</code> is enumerable.\nChoose one <code>ADAPTIVE</code>(default) and <code>BLOCK</code>.\n\n- <code>ADAPTIVE</code>: buffer expansion based on compression ratio in filled buffer.\n- <code>BLOCK</code>: buffer expansion based on <code>BufferSize</code>.\n\n\n#### GZIP\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar gunzip = new Zlib.Gunzip(compressed);\nvar plain = gunzip.decompress();\n```\n\n\n#### PKZIP\n\n\n```js\n// compressed = Array.<number> or Uint8Array\nvar unzip = new Zlib.Unzip(compressed);\nvar filenames = unzip.getFilenames();\nvar plain = unzip.decompress(filenames[0]);\n```\n\n\n### Node.js\n\nsee unit tests.\n<https://github.com/imaya/zlib.js/blob/master/test/node-test.js>\n\n\n## Debug\n\nIf you want to know the code before compile, SourceMaps and PrettyPrint can be used.\n\n\n### Source Map\n\nIf you want to use the Source Map, use `dev` version.\n\nFor example, you want to use Inflate with Source Map.\n\n    - inflate.min.js // release version\n    - inflate.dev.min.js // development version <- use this\n\n\n### Pretty Print\n\n`zlib.pretty.js` is not renamed symbol.\n\n\nHow to build\n------------\n\nBuild using Grunt and Closure Compiler.\n\n### Requirement\n\n- Grunt\n- Python\n\n### Build\n\nUse \"grunt\" command.\n\n```\n$ grunt [target]\n```\n\n#### Build target\n\ntarget         | generate file         | implementation\n---------------|-----------------------|-------------\ndeps           | deps.js               | (dependency: deps.js)\ndeflate        | deflate.min.js        | ZLIB Deflate\ninflate        | inflate.min.js        | ZLIB Inflate\ninflate_stream | inflate_stream.min.js | ZLIB Inflate (stream)\nzlib           | zlib.min.js           | ZLIB Deflate + Inflate\ngzip           | gzip.min.js           | GZIP Compression\ngunzip         | gunzip.min.js         | GZIP Decompression\nzlib_and_gzip  | zlib_and_gzip.min.js  | ZLIB + GZIP\nnode           | node-zlib.js          | ZLIB + GZIP for node.js\nzip            | zip.min.js            | PKZIP Compression\nunzip          | unzip.min.js          | PKZIP Decompression\nall            | *                     | default target\n\n\nTest\n------\n\nUnit tests are using Karma and mocha.\n\n```\n$ npm test\n```\n\n### Browser only\n\n```\n$ npm run test-karma\n```\n\n### Node.js only\n\n```\n$ npm run test-mocha\n```\n\n\nIssue\n-----\n\nPreset dictionary is not implemented.\n\n\nLicense\n--------\n\nCopyright &copy; 2012 imaya.\nLicensed under the MIT License.\n",
    "licenseText": "/**\n * @license\n * zlib.js\n * JavaScript Zlib Library\n * https://github.com/imaya/zlib.js\n *\n * The MIT License\n *\n * Copyright (c) 2012 imaya\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/zlibjs/-/zlibjs-0.3.1.tgz#50197edb28a1c42ca659cc8b4e6a9ddd6d444554",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/zlibjs/-/zlibjs-0.3.1.tgz",
    "hash": "50197edb28a1c42ca659cc8b4e6a9ddd6d444554",
    "integrity": "sha1-UBl+2yihxCymWcyLTmqd3W1ERVQ=",
    "registry": "npm",
    "packageName": "zlibjs",
    "cacheIntegrity": "sha512-+J9RrgTKOmlxFSDHo0pI1xM6BLVUv+o0ZT9ANtCxGkjIVCCUdx9alUF8Gm+dGLKbkkkidWIHFDZHDMpfITt4+w== sha1-UBl+2yihxCymWcyLTmqd3W1ERVQ="
  },
  "registry": "npm",
  "hash": "50197edb28a1c42ca659cc8b4e6a9ddd6d444554"
}