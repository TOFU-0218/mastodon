{
  "manifest": {
    "name": "create-emotion",
    "version": "9.2.12",
    "description": "The Next Generation of CSS-in-JS.",
    "main": "dist/index.cjs.js",
    "module": "dist/index.esm.js",
    "types": "types/index.d.ts",
    "files": [
      "src",
      "dist",
      "types"
    ],
    "scripts": {
      "test:typescript": "dtslint types"
    },
    "dependencies": {
      "@emotion/hash": "^0.6.2",
      "@emotion/memoize": "^0.6.1",
      "@emotion/stylis": "^0.7.0",
      "@emotion/unitless": "^0.6.2",
      "csstype": "^2.5.2",
      "stylis": "^3.5.0",
      "stylis-rule-sheet": "^0.0.10"
    },
    "devDependencies": {
      "@types/react": "16.0.16",
      "babel-plugin-transform-define": "^1.3.0",
      "dtslint": "^0.3.0"
    },
    "author": {
      "name": "Kye Hohenberger"
    },
    "homepage": "https://emotion.sh/",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/emotion-js/emotion/tree/master/packages/create-emotion"
    },
    "keywords": [
      "styles",
      "emotion",
      "react",
      "css",
      "css-in-js"
    ],
    "bugs": {
      "url": "https://github.com/emotion-js/emotion/issues"
    },
    "umd:main": "./dist/emotion.umd.min.js",
    "gitHead": "7c582301317cd9c0038a13a118456e798ffcadf8",
    "_registry": "npm",
    "_loc": "/home/mastodon/.cache/yarn/v6/npm-create-emotion-9.2.12-0fc8e7f92c4f8bb924b0fef6781f66b1d07cb26f-integrity/node_modules/create-emotion/package.json",
    "readmeFilename": "README.md",
    "readme": "# create-emotion\n\n### Create distinct instances of emotion.\n\nThe main [emotion](https://github.com/emotion-js/emotion/tree/master/packages/emotion) repo can be thought of as a call to `createEmotion` with sensible defaults for most applications.\n\n```javascript\nimport createEmotion from 'create-emotion'\n\nconst context = typeof global !== 'undefined' ? global : {}\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  caches\n} = createEmotion(context)\n```\n\n### Upside\n\n* Calling it directly will allow for some low level customization.\n\n* Create custom names for emotion APIs to help with migration from other, similar libraries.\n\n* Could set custom `key` to `üë©‚Äçüé§`, `ü•û`, `‚öõÔ∏è`, `üë©‚Äçüé®`\n\n### Downside\n\n* Introduces some amount of complexity to your application that can vary depending on developer experience.\n\n* Required to keep up with changes in the repo and API at a lower level than if using `emotion` directly\n\n### Primary use cases\n\n* Using emotion in embedded contexts such as an `<iframe/>`\n\n* Setting a [nonce]() on any `<style/>` tag emotion creates for security purposes\n\n* Use emotion with a developer defined `<style/>` tag\n\n* Using emotion with custom stylis plugins\n\n### Advanced use cases\n\n* Using emotion in component libraries to sync up multiple intances of emotion together\n\n```jsx\nimport createEmotion from 'create-emotion'\n\nconst context = typeof global !== 'undefined' ? global : {}\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  caches\n} = createEmotion(context)\n```\n\n`create-emotion` accepts a `context` and a set of options.\n\n## Context\n\n`emotion` requires a global object for server-side rendering to ensure that even if a module is calling an emotion instance from two paths(e.g. the same emotion instance in multiple node_modules, this can happen often with linking [#349](https://github.com/emotion-js/emotion/issues/349)) they'll still both work with SSR. If you aren't using SSR, `context` can be an empty object. This isn't required in the browser because your bundler should deduplicate modules.\n\n## Multiple instances in a single app example\n\n```jsx\nimport createEmotion from 'create-emotion'\n\nconst context = typeof global !== 'undefined' ? global : {}\n\nif (context.__MY_EMOTION_INSTANCE__ === undefined) {\n  context.__MY_EMOTION_INSTANCE__ = {}\n}\n\nexport const {\n  flush,\n  hydrate,\n  cx,\n  merge,\n  getRegisteredStyles,\n  injectGlobal,\n  keyframes,\n  css,\n  sheet,\n  caches\n} = createEmotion(context.__MY_EMOTION_INSTANCE__, {\n  // The key option is required when there will be multiple instances in a single app\n  key: 'some-key'\n})\n```\n\n**Note**: calling `createEmotion` twice with the same `context` will use the same instance, so options provided in another call of `createEmotion` with the same context will be ignored.\n\n## Options\n\n### nonce: string\n\nA nonce that will be set on each style tag that emotion inserts for [Content Security Policies](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP).\n\n### stylisPlugins: Function | Array<Function>\n\nA Stylis plugin or plugins that will be run by stylis during preprocessing. [Read Stylis' docs to find out more](https://github.com/thysultan/stylis.js#plugins). This can for be used for many purposes such as RTL.\n\n### prefix: boolean | Function\n\nAllows changing Stylis' prefixing settings, this defaults to `true`. It can be a boolean or a function to dynamicly set which properties are prefixed. [More information can be found in Stylis' docs](https://github.com/thysultan/stylis.js#vendor-prefixing)\n\n### key: string\n\nThe prefix before class names, this defaults to `css`. It will also be set as the value of the `data-emotion` attribute on the style tags that emotion inserts and it's used in the attribute name that marks style elements in `renderStylesToString` and `renderStylesToNodeStream`. This is **required if using multiple emotion instances in the same app**.\n\n### container: HTMLElement\n\nA DOM Node that emotion will insert all of it's style tags into, this is useful for inserting styles into iframes.\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Kye Hohenberger\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/create-emotion/-/create-emotion-9.2.12.tgz#0fc8e7f92c4f8bb924b0fef6781f66b1d07cb26f",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/create-emotion/-/create-emotion-9.2.12.tgz",
    "hash": "0fc8e7f92c4f8bb924b0fef6781f66b1d07cb26f",
    "integrity": "sha512-P57uOF9NL2y98Xrbl2OuiDQUZ30GVmASsv5fbsjF4Hlraip2kyAvMm+2PoYUvFFw03Fhgtxk3RqZSm2/qHL9hA==",
    "registry": "npm",
    "packageName": "create-emotion",
    "cacheIntegrity": "sha512-P57uOF9NL2y98Xrbl2OuiDQUZ30GVmASsv5fbsjF4Hlraip2kyAvMm+2PoYUvFFw03Fhgtxk3RqZSm2/qHL9hA== sha1-D8jn+SxPi7kksP72eB9msdB8sm8="
  },
  "registry": "npm",
  "hash": "0fc8e7f92c4f8bb924b0fef6781f66b1d07cb26f"
}